/* automatically generated by rust-bindgen 0.71.1 */

pub type __pid_t = ::std::os::raw::c_int;
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_walker_opts {
    pub pidCount: usize,
    pub pids: *mut pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stack_walker_opts"][::std::mem::size_of::<stack_walker_opts>() - 16usize];
    ["Alignment of stack_walker_opts"][::std::mem::align_of::<stack_walker_opts>() - 8usize];
    ["Offset of field: stack_walker_opts::pidCount"]
        [::std::mem::offset_of!(stack_walker_opts, pidCount) - 0usize];
    ["Offset of field: stack_walker_opts::pids"]
        [::std::mem::offset_of!(stack_walker_opts, pids) - 8usize];
};
pub type symbol_id_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_walker_frame {
    pub symbol_id: symbol_id_t,
    pub inst_idx: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stack_walker_frame"][::std::mem::size_of::<stack_walker_frame>() - 8usize];
    ["Alignment of stack_walker_frame"][::std::mem::align_of::<stack_walker_frame>() - 4usize];
    ["Offset of field: stack_walker_frame::symbol_id"]
        [::std::mem::offset_of!(stack_walker_frame, symbol_id) - 0usize];
    ["Offset of field: stack_walker_frame::inst_idx"]
        [::std::mem::offset_of!(stack_walker_frame, inst_idx) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_walker_run {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn pystacks_init(
        bpf_skel_obj: *mut bpf_object,
        opts: *mut stack_walker_opts,
    ) -> *mut stack_walker_run;
}
unsafe extern "C" {
    pub fn pystacks_symbolize_function(
        run: *mut stack_walker_run,
        stackframe: *const stack_walker_frame,
        function_name_buffer: *mut ::std::os::raw::c_char,
        function_name_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pystacks_symbolize_filename_line(
        run: *mut stack_walker_run,
        stackframe: *const stack_walker_frame,
        filename_buffer: *mut ::std::os::raw::c_char,
        filename_len: usize,
        line_number: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pystacks_free(run: *mut stack_walker_run);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_object {
    _unused: [u8; 0],
}
